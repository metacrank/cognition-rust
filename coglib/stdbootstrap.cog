ldfgldftgldfdtgl
df 
 
dfiff0123456789â†Šâ†‹ðŸœ˜ digits f Ì… negc f . radix f , cd-delim f : meta-radix f ; meta-delim f
a b compose f base f 1 crank ing 11000 base

5 crank 2crank 2 crank
1 crank unglue swap quote prepose def

2crank ing 2 crank 18 itoc spc
2crank ing 1 crank swap quote def
2crank ing 2 crank 9 itoc tab
2crank ing 1 crank swap quote def
2crank ing 2 crank â†Š itoc endl
2crank ing 1 crank swap quote def
2crank ing 2 crank 1â†‹Ì… itoc cret
2crank ing 1 crank swap quote def
2crank ing 0 crank
2crank ing 1 crank tab delim tab ignore
2crank ing 0 crank
2crank ing 0 crank false ff 1
2crank ing 1 crank cut unaliasf
2crank ing 0 crank 0
2crank ing 1 crank cut swap quote
2crank ing 1 crank def
2crank ing 2 crank f unglue
2crank ing 1 crank def
2crank ing 0 crank
2crank ing 2 crank setd dup def? eval seti dup def? eval sets dup def? eval
2crank ing 2 crank s quote unglue prepose swap compose def compose drop
2crank ing 1 crank if
2crank ing 2 crank i quote unglue prepose swap compose def compose drop
2crank ing 1 crank if
2crank ing 2 crank d quote unglue prepose swap compose def compose drop
2crank ing 1 crank if
2crank ing 0 crank
2crank ing 0 crank #
2crank ing 2 crank geti unglue getd unglue gets unglue crankbase unglue 1 quote metacrankbase unglue
2crank ing 2 crank f unglue d unglue f unglue i unglue endl unglue s unglue
2crank ing 1 crank compose compose compose compose compose compose compose compose compose compose compose
2crank ing 2 crank drop unglue 1 quote swap unglue metacrank unglue crank unglue s unglue d unglue i unglue
2crank ing 1 crank compose compose compose compose compose compose compose
2crank ing 1 crank VMACRO cast quote compose
2crank ing 2 crank 0 quote crank unglue 1 quote 1 quote metacrank unglue
2crank ing 1 crank compose compose compose compose compose VMACRO cast
2crank ing 1 crank def
2crank ing 2 crank # singlet # delim
2crank ing 0 crank
2crank ing 1 crank # This is a prefix comment function (#)
2crank ing 1 crank
2crank ing 1 crank # COGLIB_DIR environment variable
2crank ing 0 crank coglib-dir
2crank ing 2 crank COGLIB_DIR quote var unglue
2crank ing 1 crank compose VMACRO cast def
2crank ing 1 crank
2crank ing 1 crank #'crank file2: ['file1 feval...']' emulates the behaviour of 'crank -s 2 file1 file2'
2crank ing 0 crank feval
2crank ing 1 crank
2crank ing 2 crank word? unglue
2crank ing 1 crank stack quote
2crank ing 2 crank BAD spc ARGUMENT spc TYPE
2crank ing 1 crank concat concat concat concat quote
2crank ing 2 crank ethrow unglue
2crank ing 1 crank swap prepose quote
2crank ing 2 crank if unglue
2crank ing 1 crank compose compose compose
2crank ing 1 crank
2crank ing 2 crank esize unglue swap unglue 0 quote vat unglue fread unglue
2crank ing 2 crank swap unglue quote eval dip unglue swap unglue esize unglue = unglue
2crank ing 1 crank compose compose compose compose compose compose compose compose compose compose
2crank ing 1 crank
2crank ing 2 crank prepose unglue streval unglue
2crank ing 1 crank compose quote compose
2crank ing 2 crank edrop unglue coglib-dir unglue / quote concat unglue
2crank ing 2 crank swap unglue concat unglue fread unglue prepose unglue streval unglue
2crank ing 1 crank compose compose compose compose compose compose compose compose quote
2crank ing 1 crank
2crank ing 2 crank if unglue
2crank ing 1 crank compose compose
2crank ing 1 crank
2crank ing 1 crank def
2crank ing 1 crank
2crank ing 1 crank # Comment-aware prefix version of feval
2crank ing 0 crank cog
2crank ing 1 crank
2crank ing 2 crank dup unglue # quote = unglue
2crank ing 1 crank compose compose
2crank ing 1 crank
2crank ing 2 crank dup unglue quote eval dip unglue eval unglue
2crank ing 1 crank compose compose VMACRO cast
2crank ing 1 crank quote compose
2crank ing 1 crank
2crank ing 2 crank swap unglue drop unglue 1 quote crank unglue 1 quote 0 quote metacrank unglue feval unglue
2crank ing 1 crank compose compose compose compose compose compose compose
2crank ing 1 crank quote compose
2crank ing 1 crank
2crank ing 2 crank if unglue compose eval
2crank ing 1 crank quote dup compose
2crank ing 1 crank
2crank ing 2 crank 0 quote crank unglue 1 quote 1 quote metacrank unglue
2crank ing 1 crank compose compose compose compose compose VMACRO cast
2crank ing 1 crank
2crank ing 1 crank def
2crank ing 1 crank
2crank ing 1 crank ### We have applied the following changes to the state:
2crank ing 1 crank #
2crank ing 1 crank # ----Parser----
2crank ing 1 crank # Set the delims to ' \n\t#'
2crank ing 1 crank # Set the ignored to ' \n\t'
2crank ing 1 crank # Set the singlets to '#'
2crank ing 1 crank # Unaliased 'f' (the only falias now is 'ing'
2crank ing 1 crank #
2crank ing 1 crank # ----Math----
2crank ing 1 crank # Set the digits to: 0123456789â†Šâ†‹ðŸœ˜
2crank ing 1 crank # Set the negc to U0305 (Combining Overline)
2crank ing 1 crank # Set the radix point to be the period (.)
2crank ing 1 crank # Set the Cayley-Dickson delimiter to the comma (,)
2crank ing 1 crank # Set the base to twenty-four (chronimal)
2crank ing 1 crank #
2crank ing 1 crank # ----Definitions----
2crank ing 1 crank #    '2crank': ( [ 2 ] crank )
2crank ing 1 crank #       'spc': [ [ ' ' ] ]
2crank ing 1 crank #       'tab': [ [ '\t' ] ]
2crank ing 1 crank #      'endl': [ [ '\n' ] ]
2crank ing 1 crank #      'cret': [ [ '\r' ] ]
2crank ing 1 crank #         'f': [ [ '' ] ]
2crank ing 1 crank #      'false: [ [ '' ] ]
2crank ing 1 crank #      'setd': ( d )
2crank ing 1 crank #      'seti': ( i )
2crank ing 1 crank #      'sets': ( s )
2crank ing 1 crank #         '#': ( geti getd gets crankbase [ 1 ] metacrankbase [ '' ] d [ '' ] i [ '\n' ] s
2crank ing 1 crank #                ( drop [ 1 ] swap metacrank crank s d i )
2crank ing 1 crank #                [ 0 ] crank [ 1 ] [ 1 ] metacrank )
2crank ing 1 crank #'coglib-dir': ( [ 'COGLIB_DIR' ] var )
2crank ing 1 crank #     'feval': ( word? [ ] ( [ 'BAD ARGUMENT TYPE' ] ethrow ) if
2crank ing 1 crank #                esize swap [ 0 ] vat fread ( swap ) dip swap esize =
2crank ing 1 crank #                ( prepose evalstr ) ( edrop coglib-dir [ '/' ] concat swap concat fread prepose evalstr ) if )
2crank ing 1 crank #       'cog': ( ( dup [ '#' ] = ( ( dup ) dip eval ) ( swap drop [ 1 ] crank [ 1 ] [ 0 ] metacrank feval ) if )
2crank ing 1 crank #                ( dup [ '#' ] = ( ( dup ) dip eval ) ( swap drop [ 1 ] crank [ 1 ] [ 0 ] metacrank feval ) if )
2crank ing 1 crank #                [ 0 ] crank [ 1 ] [ 1 ] metacrank )
