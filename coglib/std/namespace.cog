# Namespacing is achieved via the :: word. :: is an infix word that
# evaluates the definition of the following word as found in the
# stack at the top of the current stack

# TODO: implement :: for quotes
# TODO: implement :: for cog
# TODO: generalize to arbitrary crank states

# Proto namespacing
child cd

[ ensure-vstack ] ( type "VSTACK" != ( "BAD ARGUMENT TYPE" ethrow return ) [ ] if ) def
[ recrank ] ( swap [ 1 ] swap metacrank swap crank ) def
[ operation ] (
  swap quote compose cd dup def? swap unglue
  ( ( uncd ) dip swap drop ) dip swap
) def

":" undelim ":" unsinglet

\ :: (
  ssize [ 1 ] ==
  ( eval ) ( swap ensure-vstack operation ( eval ) [ ] if ) if
) def

[ infix-namespace ] (
  crankbase [ 1 ] metacrankbase
  ( recrank \ :: )
  [ 0 ] crank [ 1 ] [ 1 ] metacrank
) def

\ : (
  crankbase [ 1 ] metacrankbase
  ( recrank dup ":" =
    ( drop infix-namespace ) ( ":" swap concat concat eval ) if )
  [ 0 ] crank [ 1 ] [ 1 ] metacrank
) def

# Finally, we manipulate the parser to detect the double colon (::)
# This is accomplished through the use of the null prefix ('')

"" dup unglue [
  ":" (
    len
    ( [ 1 ] cut swap dup ":" =
      ( len (( :: )) ( infix-namespace ) if )
      ( ":" swap concat swap concat )
      if )
    ( drop ":" )
    if
  )
] [ 0 ] [ 1 ] displace swap
( cd def uncd ) eval swap compose def

# Implement namespacing for quotes
[ nest ] ( compose ( dup ) dip swap ) def
[ namespace-nest ] ( quote compose "::" nest ) def
[ qldisplc ] ( stack swap dup [ 1 ] - swap displace ) def
[ qlast ] ( size dup ( qldisplc ) ( drop f ) if ) def
[ is-stack ] ( custom? ( fllib? ) dip or ( word? ) dip or not ) def
[ is-vstack ] ( is-stack ( eval type "VSTACK" = ) ( f ) if ) def

[ q-definition ] ( ( dup ":" =
                   ( drop ( namespace-nest ) )
                   ( ( qlast ) dip ":" swap concat concat nest ) if ) ) def

[ eq-nest ] (
  drop
  ( swap size dup ?
    ( qldisplc is-vstack
      ( ( swap ) dip swap quote compose cd unglue ( uncd ) dip swap drop compose ( dup ) dip swap )
      ( compose swap namespace-nest ) if )
    ( drop swap namespace-nest ) if )
) def

[ eq-definition ] (
  ( dup ":" =
    ( eq-nest )
    ( ( qlast ) dip ":" swap concat concat dup def? ( unglue ) [ ] if nest ) if )
) def

[ [q-null-definition] ] [ [
  ":" ( ( dup ":" =
          ( drop ( namespace-nest ) )
          ( ":" swap concat nest ) if ) )
] ] def

[ [eq-null-definition] ] [ [
  ":" ( ( dup ":" =
          ( eq-nest )
          ( ":" swap concat nest ) if ) )
] ] def

[ qprefix-namespace ] (
  dup unglue
  [ ":" ( q-definition ) ] [ 0 ] [ 1 ] displace
  swap cd def
  "" dup unglue ( uncd ) dip [q-null-definition] [ 0 ] [ 1 ] displace
  swap cd def uncd swap compose def quote compose cd def
  uncd swap compose def
) def

[ eqprefix-namespace ] (
  dup unglue
  [ ":" ( eq-definition ) ] [ 0 ] [ 1 ] displace
  swap cd def uncd swap compose def
) def

\ [  qprefix-namespace
\ (  eqprefix-namespace
\ {  qprefix-namespace
\ [[ eqprefix-namespace
\ (( qprefix-namespace
\ {{ eqprefix-namespace

# Namespace manipulation words

[ new-namespace ] ( # "name" -- "name" [container]
  dup def? ( dup unglue ) ( stack ) if
) def
[ recurse-down ] ( # "name_1" [cont_1] ... "name_n" [cont_n] n "name" -- ... n+1 "name_n+1" [cont_n+1]
  swap dup [ 0 ] == swap
  ( ( new-namespace )
    ( quote compose cd new-namespace ( ( uncd ) dip ) dip ) if ) dip
  [ 1 ] +
) def

[ begin ] (
  halt [ 1 ] [ 1 ] metacrank "\n" unignore [ 0 ]
  ( [ 1 ] crank dup "\n" =
    ( drop drop "\n" ignore child cd )
    ( dup dup ":" = swap "" = or
      ( drop dup )
      ( swap ( recurse-down ) dip dup ) if ) if ) dup
) def

[ invert ] (
  uncd ( dup [ 0 ] == ) dip swap ( [ [ ] ] compose ) ( ( swap ) dip swap quote compose ) if
  ( ( uncd ) dip swap quote compose )
  root? [ [[ ccd ]] ] [ [[ cd ]] ] if compose eval stack
) def

[ [end-recurse] ] [[ "" (
  dup [ 0 ] == ( drop quote def return ) [ ] if
  ( quote swap quote compose compose cd quote def uncd ) dip
  [ 1 ] -
) "" ]] ( cd compose def uncd ) eval "" compose def

[ end ] (
  quote compose ccd swap
  dup [ 0 ] == ( drop drop ) ( [end-recurse] eval ) if
) def

# Invert proto namespace
namespace-invert

[ begin ] bequeath
[ invert ] bequeath
[ end ] bequeath

swap

# Bequeath definitions
""   bequeath
\ :  bequeath
\ :: bequeath
\ [  bequeath
\ (  bequeath
\ {  bequeath
\ [[ bequeath
\ (( bequeath
\ {{ bequeath

swap quote compose ccd # return to original container

":" singlet ":" delim

# Define std::namespace namespace
"std" dup def? ( dup unglue ) ( stack ) if (
  ( swap ) dip swap quote compose cd
  "namespace" swap def uncd
) eval quote def
