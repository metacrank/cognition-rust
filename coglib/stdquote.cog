2crank ing 1 crank # preliminary escape character \
2crank ing 0 crank \
2crank ing 0 crank halt 1 quote ing crank
2crank ing 1 crank compose compose
2crank ing 2 crank VMACRO cast quote eval
2crank ing 0 crank halt 1 quote ing dup ing metacrank
2crank ing 1 crank compose compose compose compose
2crank ing 2 crank VMACRO cast
2crank ing 1 crank def
2crank ing 0 crank
2crank ing 0 crank
2crank ing 1 crank # [:
2crank ing 1 crank # crankbase [ 1 ] metacrankbase dup [ 1 ] =
2crank ing 1 crank # [ ( meta-crank-stuff0 ) ]
2crank ing 1 crank # [ ( meta-crank-stuff1 ) ]
2crank ing 1 crank # if dup stack swap
2crank ing 1 crank # [ 0 ] crank [ 1 ] [ 1 ] metacrank
2crank ing 0 crank
2crank ing 1 crank # meta-crank-stuff0 === dup ']' = ( drop swap drop swap [ 1 ] swap metacrank swap crank
2crank ing 1 crank # quote compose [ dup ] dip swap ) ( compose ( dup ) dip swap ) if
2crank ing 0 crank
2crank ing 1 crank # meta-crank-stuff1 === dup ']' = ( drop swap drop swap [ 1 ] swap metacrank swap crank )
2crank ing 1 crank # ( compose [ dup ] dip swap ) if
2crank ing 0 crank
2crank ing 1 crank # declaration
2crank ing 0 crank [
2crank ing 0 crank
2crank ing 1 crank # init
2crank ing 0 crank crankbase 1 quote ing metacrankbase dup 1 quote ing =
2crank ing 1 crank compose compose compose compose compose
2crank ing 0 crank
2crank ing 1 crank # meta-crank-stuff0
2crank ing 3 crank dup ] quote =
2crank ing 1 crank compose compose
2crank ing 6 crank drop swap drop swap 1 quote swap metacrank swap crank quote
2crank ing 3 crank compose dup quote dip swap
2crank ing 1 crank compose compose compose compose compose compose compose compose
2crank ing 1 crank compose compose compose compose compose \ VMACRO cast quote compose
2crank ing 3 crank compose dup quote dip swap
2crank ing 1 crank compose compose compose \ VMACRO cast quote compose \ if compose
2crank ing 1 crank \ VMACRO cast quote quote compose
2crank ing 0 crank
2crank ing 1 crank # meta-crank-stuff1
2crank ing 3 crank dup ] quote =
2crank ing 1 crank compose compose
2crank ing 6 crank drop swap drop swap 1 quote swap metacrank swap crank
2crank ing 1 crank compose compose compose compose compose compose compose compose \ VMACRO cast quote compose
2crank ing 3 crank compose dup quote dip swap
2crank ing 1 crank compose compose compose \ VMACRO cast quote compose \ if compose
2crank ing 1 crank \ VMACRO cast quote quote compose
2crank ing 0 crank
2crank ing 1 crank # rest of the definition
2crank ing 6 crank if dup stack swap 0 quote crank
2crank ing 2 crank 1 quote 1 quote metacrank
2crank ing 1 crank compose compose compose compose compose compose compose compose
2crank ing 1 crank compose \ VMACRO cast
2crank ing 0 crank
2crank ing 1 crank def

# [:
# crankbase [ 1 ] metacrankbase dup [ 1 ] =
# [ ( meta-crank-stuff0 ) ]
# [ ( meta-crank-stuff1 ) ]
# if dup stack swap
# [ 0 ] crank [ 1 ] [ 1 ] metacrank

# meta-crank-stuff0:
# dup ']' =
# ( drop swap drop swap [ 1 ] swap metacrank swap crank quote compose [ dup ] dip swap )
# ( dup dup dup '[' = swap '(' = or swap '\' = or [ eval ] ( compose [ dup ] dip swap ) if )
# if

# meta-crank-stuff1:
# dup ']' =
# ( drop swap drop swap [ 1 ] swap metacrank swap crank )
# ( dup dup dup '[' = swap '(' = or swap '\' = or [ eval ] ( compose [ dup ] dip swap ) if )
# if

\ [

[ crankbase ] [ 1 ] quote compose [ metacrankbase dup ] compose [ 1 ] quote compose [ = ] compose

[ dup ] \ ] quote compose [ = ] compose
[ drop swap drop swap ] [ 1 ] quote compose [ swap metacrank swap crank quote compose ] compose
[ dup ] quote compose [ dip swap ] compose \ VMACRO cast quote compose
[ dup dup dup ] \ [ quote compose [ = swap ] compose \ ( quote compose [ = or swap ] compose \ \ quote compose [ = or ] compose
[ eval ] quote compose
[ compose ] [ dup ] quote compose [ dip swap ] compose \ VMACRO cast quote compose [ if ] compose \ VMACRO cast
quote compose [ if ] compose \ VMACRO cast quote quote

[ dup ] \ ] quote compose [ = ] compose
[ drop swap drop swap ] [ 1 ] quote compose [ swap metacrank swap crank ] compose \ VMACRO cast quote compose
[ dup dup dup ] \ [ quote compose [ = swap ] compose \ ( quote compose [ = or swap ] compose \ \ quote compose [ = or ] compose
[ eval ] quote compose
[ compose ] [ dup ] quote compose [ dip swap ] compose \ VMACRO cast quote compose [ if ] compose \ VMACRO cast
quote compose [ if ] compose \ VMACRO cast quote quote

compose compose [ if dup stack swap ] compose [ 0 ] quote compose [ crank ] compose
[ 1 ] quote dup compose compose [ metacrank ] compose \ VMACRO cast

def

# \ === [ 1 ] metacrankbase [ 1 ] =
# [ ( halt [ 1 ] [ 1 ] metacrank quote compose [ dup ] dip swap ) ]
# [ ( halt [ 1 ] crank ) ]
# if halt [ 1 ] [ 1 ] metacrank
\ \
[ [ 1 ] metacrankbase [ 1 ] = ]
[ halt [ 1 ] [ 1 ] metacrank quote compose [ dup ] dip swap ]
\ VMACRO cast quote quote compose
[ halt [ 1 ] crank ] VMACRO cast quote quote compose
[ if halt [ 1 ] [ 1 ] metacrank ] compose \ VMACRO cast
def

# macro quote declaration
\ (
\ [ unglue
[ ↋ ] split swap [ ↊ ] split drop [ macro ] compose
[ 8 ] split quote [ prepose ] compose dip
[ 7 ] split eval eval
[ ] [ 1 ] [ 2 ] displace drop [ \ ) ] [ 1 ] [ 1 ] displace drop
quote quote quote [ prepose ] compose dip
[ 6 ] split eval eval
[ ] [ 1 ] [ 2 ] displace drop [ \ ) ] [ 1 ] [ 1 ] displace drop
quote quote quote [ prepose ] compose dip
prepose
def

# redefine macro quote to automatically expand
\ (
( crankbase [ 1 ] metacrankbase dup [ 1 ] =
  [ ( dup \ ) =
      ( drop swap drop swap [ 1 ] swap metacrank swap crank quote compose ( dup ) dip swap )
      ( dup dup dup \ [ = swap \ ( = or swap \ \ = or
        ( eval )
        ( dup def? ( unglue ) [ ] if compose ( dup ) dip swap )
        if )
      if ) ]
  [ ( dup \ ) =
      ( drop swap drop swap [ 1 ] swap metacrank swap crank )
      ( dup dup dup \ [ = swap \ ( = or swap \ \ = or
        ( eval )
        ( dup def? ( unglue ) [ ] if compose ( dup ) dip swap )
        if )
      if ) ]
  if dup macro swap
  [ 0 ] crank [ 1 ] [ 1 ] metacrank ) def

# Namespacing
child cd

[ get-keyword ] (
  unglue swap quote compose cd dup def? dup
  ( swap unglue swap ) [ ] if
  ( ( uncd drop ) dip ) dip
) def

# Factor out common definitions
[ addon  ] ( compose ( dup ) dip swap ) def
[ init   ] ( crankbase [ 1 ] metacrankbase ) def
[ rqdrop ] ( drop swap drop ) def
[ finish ] ( swap [ 1 ] swap metacrank swap crank ) def
[ nest   ] ( compose ( dup ) dip swap ) def
[ body   ] ( get-keyword ( eval ) ( addon ) if ) def
[ ebody  ] ( get-keyword ( eval ) ( dup def? ( unglue ) ( ) if addon ) if ) def
[ end    ] ( [ 0 ] crank [ 1 ] [ 1 ] metacrank ) def

[ bequeath-quote-prefix ] (
  \ [  ( ghost ( dup \ ]  = ( rqdrop quote nest ) ( \ [  body  ) if ) dup stack swap ) def
  \ (  ( ghost ( dup \ )  = ( rqdrop quote nest ) ( \ (  ebody ) if ) dup macro swap ) def
  \ {  ( ghost ( dup \ }  = ( rqdrop quote nest ) ( \ {  body  ) if ) dup child swap ) def
  \ [[ ( ghost ( dup \ ]] = ( rqdrop quote nest ) ( \ [[ ebody ) if ) dup stack swap ) def
  \ (( ( ghost ( dup \ )) = ( rqdrop quote nest ) ( \ (( body  ) if ) dup macro swap ) def
  \ {{ ( ghost ( dup \ }} = ( rqdrop quote nest ) ( \ {{ ebody ) if ) dup child swap ) def
) def

[ defquote ]
f quote quote
( swap quote compose cd def bequeath-quote-prefix uncd f compose )
swap prepose def
\ [  ( init ( dup \ ]  = ( rqdrop finish ) ( \ [  body  ) if ) dup stack swap end ) defquote
\ (  ( init ( dup \ )  = ( rqdrop finish ) ( \ (  ebody ) if ) dup macro swap end ) defquote
\ {  ( init ( dup \ }  = ( rqdrop finish ) ( \ {  body  ) if ) dup child swap end ) defquote
\ [[ ( init ( dup \ ]] = ( rqdrop finish ) ( \ [[ ebody ) if ) dup stack swap end ) defquote
\ (( ( init ( dup \ )) = ( rqdrop finish ) ( \ (( body  ) if ) dup macro swap end ) defquote
\ {{ ( init ( dup \ }} = ( rqdrop finish ) ( \ {{ ebody ) if ) dup child swap end ) defquote
def def def def def def

# Better escape character
# (different behaviour inside quotes than before: doesn't double-quote)
\ \ ( init ( finish ) end ) def
[ qprefix-escape ] (
  dup unglue [ [ \ ] ( ghost ( nest ) ) ]
  [ 0 ] [ 1 ] displace
  swap cd def uncd swap compose def
) def

\ [  qprefix-escape
\ (  qprefix-escape
\ {  qprefix-escape
\ [[ qprefix-escape
\ (( qprefix-escape
\ {{ qprefix-escape

# Define comment behaviour inside quotes:
[ qprefix-comment ] (
  dup unglue
  [ [ # ] ( ghost
    geti getd gets f setd f seti endl sets
    ( drop sets setd seti ( dup ) dip swap )
  ) ] [ 0 ] [ 1 ] displace
  swap cd def uncd swap compose def
) def

\ [  qprefix-comment
\ (  qprefix-comment
\ {  qprefix-comment
\ [[ qprefix-comment
\ (( qprefix-comment
\ {{ qprefix-comment

# String literal with escape sequences

\ " unsinglet \ " undelim

[ string-init   ] ( getd gets geti [ \ "\ ] setd [ \ "\ ] sets f seti ) def
[ string-finish ] ( swap seti swap sets swap setd ) def
[ string-concat ] ( concat ( dup ) dip swap ) def
[ string-addesc ] ( [ \ "\ ] setd [ \ "\ ] sets stgl string-concat ) def
[ string-error  ] [ INVALID ] spc [ ESCAPE ] spc [ CHARACTER ] concat concat concat concat quote def

[ string-death  ] ( drop drop drop drop [ 1 ] swap metacrank crank seti sets setd string-error ethrow stack ) def
[ [string-die]  ] [ \ " ( string-death ) ] ( cd def uncd ) eval \ " compose quote def
[ string-killer ] ( [ \ " ] sets f setd stgl [string-die] ) def
[ string-ekeywd ] ( [ \ " ] get-keyword ( eval ) ( string-killer ) if ) def
[ string-escape ] ( drop f setd f sets stgl ( string-ekeywd ) ) def
[ string-body   ] ( dup [ \ \ ] = ( string-escape ) ( string-concat ) if ) def
[ string-macro  ] ( dup [ \ " ] = ( rqdrop finish string-finish ) ( string-body ) if ) def

[ string-qdeath ] ( drop drop drop drop seti sets setd string-error ethrow [ [ ] ] compose ( dup ) dip swap ) def
[ [string-qdie] ] [ \ " ( string-qdeath ) ] ( cd def uncd ) eval \ " compose quote def
[ string-qiller ] ( [ \ " ] sets f setd stgl [string-qdie] ) def
[ string-qkeywd ] ( [ \ " ] get-keyword ( eval ) ( string-qiller ) if ) def
[ string-qscape ] ( drop f setd f sets stgl ( string-qkeywd ) ) def
[ string-qbody  ] ( dup [ \ \ ] = ( string-qscape ) ( string-concat ) if ) def
[ string-qmacro ] ( dup [ \ " ] = ( rqdrop string-finish quote nest ) ( string-qbody ) if ) def

[ string-cdeath ] ( drop drop drop drop seti sets setd string-error ethrow stack swap eval ) def
[ [string-cdie] ] [ \ " ( string-cdeath ) ] ( cd def uncd ) eval \ " compose quote def
[ string-ciller ] ( [ \ " ] sets f setd stgl [string-cdie] ) def
[ string-ckeywd ] ( [ \ " ] get-keyword ( eval ) ( string-ciller ) if ) def
[ string-cscape ] ( drop f setd f sets stgl ( string-ckeywd ) ) def
[ string-cbody  ] ( dup [ \ \ ] = ( string-cscape ) ( string-concat ) if ) def
[ string-cmacro ] ( dup [ \ " ] = ( rqdrop string-finish swap eval ) ( string-cbody ) if ) def

[ alrt ] [ 7 ] itoc quote def
[ bspc ] [ 8 ] itoc quote def
[ esc  ] [ 13 ] itoc quote def
[ form ] [ 1🜘̅ ] itoc quote def
[ newl ] [ ↊ ] itoc quote def
[ retc ] [ 1↋̅ ] itoc quote def
[ tab  ] [ 9 ] itoc quote def
[ vtab ] [ ↋ ] itoc quote def

\ " [[
  f ( string-init init ( string-macro ) dup f swap end )
  [ a ] ( ghost alrt string-addesc )
  [ b ] ( ghost bspc string-addesc )
  [ e ] ( ghost esc  string-addesc )
  [ f ] ( ghost form string-addesc )
  [ n ] ( ghost newl string-addesc )
  [ r ] ( ghost retc string-addesc )
  [ t ] ( ghost tab  string-addesc )
  [ v ] ( ghost vtab string-addesc )
  [ \ \ ] ( ghost [ \ \ ] string-addesc )
  [ \ " ] ( ghost [ \ " ] string-addesc )
]] ( cd def def def def def def def def def def def uncd ) eval
f compose def
\ " singlet \ " delim

[ qprefix-string ] (
  dup unglue
  [ [ \ " ] ( ghost string-init ( string-qmacro ) dup f swap ) ]
  [ 0 ] [ 1 ] displace
  swap cd def uncd swap compose def
) def

\ [  qprefix-string
\ (  qprefix-string
\ {  qprefix-string
\ [[ qprefix-string
\ (( qprefix-string
\ {{ qprefix-string

# Reimplement cog:
[ [cog-finish]  ] [ "cog" ( swap drop finish feval ) ] ( cd def uncd ) eval "cog" compose quote def
[ (cog-qfinish) ] ( ( swap drop quote compose [ feval ] addon ) ) def
[ (cog-eqfinish) ] ( ( swap drop quote compose [[ feval ]] addon ) ) def

\ cog [[
  f ( init ( "cog" get-keyword ( [cog-finish] swap eval ) [cog-finish] if ) dup end )
  "#"  ( ghost geti getd gets f setd f seti endl sets ( drop sets setd seti drop dup ) )
  "\\" ( ghost ( swap eval ) )
  "\"" ( ghost string-init ( string-cmacro ) dup f swap end )
  "["  ( ghost ( dup "]"  = ( rqdrop swap eval ) ( "["  body  ) if ) dup stack swap )
  "("  ( ghost ( dup ")"  = ( rqdrop swap eval ) ( "("  ebody ) if ) dup macro swap )
  "{"  ( ghost ( dup "}"  = ( rqdrop swap eval ) ( "{"  body  ) if ) dup child swap )
  "[[" ( ghost ( dup "]]" = ( rqdrop swap eval ) ( "[[" ebody ) if ) dup stack swap )
  "((" ( ghost ( dup "))" = ( rqdrop swap eval ) ( "((" body  ) if ) dup macro swap )
  "{{" ( ghost ( dup "}}" = ( rqdrop swap eval ) ( "{{" ebody ) if ) dup child swap )
]] ( cd def def def def def def def def def def uncd ) eval
f compose def

[ qprefix-cog ] (
  dup unglue
  [ "cog" ( ghost ( "cog" get-keyword ( (cog-qfinish) swap eval ) (cog-qfinish) if ) dup ) ]
  [ 0 ] [ 1 ] displace
  swap cd def uncd swap compose def
) def

[ eqprefix-cog ] (
  dup unglue
  [ "cog" ( ghost ( "cog" get-keyword ( (cog-eqfinish) swap eval ) (cog-eqfinish) if ) dup ) ]
  [ 0 ] [ 1 ] displace
  swap cd def uncd swap compose def
) def

\ [  qprefix-cog
\ (  eqprefix-cog
\ {  qprefix-cog
\ [[ eqprefix-cog
\ (( qprefix-cog
\ {{ eqprefix-cog

# Invert namespace
( uncd ( ( uncd ) dip swap quote compose )
       root? [ [ ccd ] ] [ [ cd ] ] if unglue compose
       eval ) eval

# Bequeath definitions
\ [   bequeath
\ (   bequeath
\ {   bequeath
\ [[  bequeath
\ ((  bequeath
\ {{  bequeath
\ \   bequeath
\ "   bequeath
\ cog bequeath

ccd # Now we're back in the original container

\ " singlet \ " delim