2crank ing 1 crank # preliminary escape character \
2crank ing 0 crank \
2crank ing 0 crank halt 1 quote ing crank
2crank ing 1 crank compose compose
2crank ing 2 crank VMACRO cast quote eval
2crank ing 0 crank halt 1 quote ing dup ing metacrank
2crank ing 1 crank compose compose compose compose
2crank ing 2 crank VMACRO cast
2crank ing 1 crank def
2crank ing 0 crank
2crank ing 0 crank
2crank ing 1 crank # [:
2crank ing 1 crank # crankbase [ 1 ] metacrankbase dup [ 1 ] =
2crank ing 1 crank # [ ( meta-crank-stuff0 ) ]
2crank ing 1 crank # [ ( meta-crank-stuff1 ) ]
2crank ing 1 crank # if dup stack swap
2crank ing 1 crank # [ 0 ] crank [ 1 ] [ 1 ] metacrank
2crank ing 0 crank
2crank ing 1 crank # meta-crank-stuff0 === dup ']' = ( drop swap drop swap [ 1 ] swap metacrank swap crank
2crank ing 1 crank # quote compose [ dup ] dip swap ) ( compose ( dup ) dip swap ) if
2crank ing 0 crank
2crank ing 1 crank # meta-crank-stuff1 === dup ']' = ( drop swap drop swap [ 1 ] swap metacrank swap crank )
2crank ing 1 crank # ( compose [ dup ] dip swap ) if
2crank ing 0 crank
2crank ing 1 crank # declaration
2crank ing 0 crank [
2crank ing 0 crank
2crank ing 1 crank # init
2crank ing 0 crank crankbase 1 quote ing metacrankbase dup 1 quote ing =
2crank ing 1 crank compose compose compose compose compose
2crank ing 0 crank
2crank ing 1 crank # meta-crank-stuff0
2crank ing 3 crank dup ] quote =
2crank ing 1 crank compose compose
2crank ing 6 crank drop swap drop swap 1 quote swap metacrank swap crank quote
2crank ing 3 crank compose dup quote dip swap
2crank ing 1 crank compose compose compose compose compose compose compose compose
2crank ing 1 crank compose compose compose compose compose \ VMACRO cast quote compose
2crank ing 3 crank compose dup quote dip swap
2crank ing 1 crank compose compose compose \ VMACRO cast quote compose \ if compose
2crank ing 1 crank \ VMACRO cast quote quote compose
2crank ing 0 crank
2crank ing 1 crank # meta-crank-stuff1
2crank ing 3 crank dup ] quote =
2crank ing 1 crank compose compose
2crank ing 6 crank drop swap drop swap 1 quote swap metacrank swap crank
2crank ing 1 crank compose compose compose compose compose compose compose compose \ VMACRO cast quote compose
2crank ing 3 crank compose dup quote dip swap
2crank ing 1 crank compose compose compose \ VMACRO cast quote compose \ if compose
2crank ing 1 crank \ VMACRO cast quote quote compose
2crank ing 0 crank
2crank ing 1 crank # rest of the definition
2crank ing 6 crank if dup stack swap 0 quote crank
2crank ing 2 crank 1 quote 1 quote metacrank
2crank ing 1 crank compose compose compose compose compose compose compose compose
2crank ing 1 crank compose \ VMACRO cast
2crank ing 0 crank
2crank ing 1 crank def

# [:
# crankbase [ 1 ] metacrankbase dup [ 1 ] =
# [ ( meta-crank-stuff0 ) ]
# [ ( meta-crank-stuff1 ) ]
# if dup stack swap
# [ 0 ] crank [ 1 ] [ 1 ] metacrank

# meta-crank-stuff0:
# dup ']' =
# ( drop swap drop swap [ 1 ] swap metacrank swap crank quote compose [ dup ] dip swap )
# ( dup dup dup '[' = swap '(' = or swap '\' = or [ eval ] ( compose [ dup ] dip swap ) if )
# if

# meta-crank-stuff1:
# dup ']' =
# ( drop swap drop swap [ 1 ] swap metacrank swap crank )
# ( dup dup dup '[' = swap '(' = or swap '\' = or [ eval ] ( compose [ dup ] dip swap ) if )
# if

\ [

[ crankbase ] [ 1 ] quote compose [ metacrankbase dup ] compose [ 1 ] quote compose [ = ] compose

[ dup ] \ ] quote compose [ = ] compose
[ drop swap drop swap ] [ 1 ] quote compose [ swap metacrank swap crank quote compose ] compose
[ dup ] quote compose [ dip swap ] compose \ VMACRO cast quote compose
[ dup dup dup ] \ [ quote compose [ = swap ] compose \ ( quote compose [ = or swap ] compose \ \ quote compose [ = or ] compose
[ eval ] quote compose
[ compose ] [ dup ] quote compose [ dip swap ] compose \ VMACRO cast quote compose [ if ] compose \ VMACRO cast
quote compose [ if ] compose \ VMACRO cast quote quote

[ dup ] \ ] quote compose [ = ] compose
[ drop swap drop swap ] [ 1 ] quote compose [ swap metacrank swap crank ] compose \ VMACRO cast quote compose
[ dup dup dup ] \ [ quote compose [ = swap ] compose \ ( quote compose [ = or swap ] compose \ \ quote compose [ = or ] compose
[ eval ] quote compose
[ compose ] [ dup ] quote compose [ dip swap ] compose \ VMACRO cast quote compose [ if ] compose \ VMACRO cast
quote compose [ if ] compose \ VMACRO cast quote quote

compose compose [ if dup stack swap ] compose [ 0 ] quote compose [ crank ] compose
[ 1 ] quote dup compose compose [ metacrank ] compose \ VMACRO cast

def

# \ === [ 1 ] metacrankbase [ 1 ] =
# [ ( halt [ 1 ] [ 1 ] metacrank quote compose [ dup ] dip swap ) ]
# [ ( halt [ 1 ] crank ) ]
# if halt [ 1 ] [ 1 ] metacrank
\ \
[ [ 1 ] metacrankbase [ 1 ] = ]
[ halt [ 1 ] [ 1 ] metacrank quote compose [ dup ] dip swap ]
\ VMACRO cast quote quote compose
[ halt [ 1 ] crank ] VMACRO cast quote quote compose
[ if halt [ 1 ] [ 1 ] metacrank ] compose \ VMACRO cast
def

# macro quote declaration
\ (
\ [ unglue
[ ↋ ] split swap [ ↊ ] split drop [ macro ] compose
[ 8 ] split quote [ prepose ] compose dip
[ 7 ] split eval eval
[ ] [ 1 ] [ 2 ] displace drop [ \ ) ] [ 1 ] [ 1 ] displace drop
quote quote quote [ prepose ] compose dip
[ 6 ] split eval eval
[ ] [ 1 ] [ 2 ] displace drop [ \ ) ] [ 1 ] [ 1 ] displace drop
quote quote quote [ prepose ] compose dip
prepose
def

# redefine macro quote to automatically expand
\ (
( crankbase [ 1 ] metacrankbase dup [ 1 ] =
  [ ( dup \ ) =
      ( drop swap drop swap [ 1 ] swap metacrank swap crank quote compose ( dup ) dip swap )
      ( dup dup dup \ [ = swap \ ( = or swap \ \ = or
        ( eval )
        ( dup def? ( unglue ) [ ] if compose ( dup ) dip swap )
        if )
      if ) ]
  [ ( dup \ ) =
      ( drop swap drop swap [ 1 ] swap metacrank swap crank )
      ( dup dup dup \ [ = swap \ ( = or swap \ \ = or
        ( eval )
        ( dup def? ( unglue ) [ ] if compose ( dup ) dip swap )
        if )
      if ) ]
  if dup macro swap
  [ 0 ] crank [ 1 ] [ 1 ] metacrank ) def

# Namespacing
child cd

[ get-keyword ] (
  unglue swap quote compose cd dup def? dup
  ( swap unglue swap ) [ ] if
  ( ( uncd drop ) dip ) dip
) def

# Factor out common definitions
[ addon  ] ( compose ( dup ) dip swap ) def
[ init   ] ( crankbase [ 1 ] metacrankbase ) def
[ rqdrop ] ( drop swap drop ) def
[ finish ] ( swap [ 1 ] swap metacrank swap crank ) def
[ nest   ] ( compose ( dup ) dip swap ) def
[ body   ] ( get-keyword ( eval ) ( addon ) if ) def
[ ebody  ] ( get-keyword ( eval ) ( dup def? ( unglue ) ( ) if addon ) if ) def
[ end    ] ( [ 0 ] crank [ 1 ] [ 1 ] metacrank ) def

[ bequeath-quote-prefix ] (
  cd
  \ [  ( ghost ( dup \ ]  = ( rqdrop quote nest ) ( \ [  body  ) if ) dup stack swap ) def
  \ (  ( ghost ( dup \ )  = ( rqdrop quote nest ) ( \ (  ebody ) if ) dup macro swap ) def
  \ {  ( ghost ( dup \ }  = ( rqdrop quote nest ) ( \ {  body  ) if ) dup child swap ) def
  \ [[ ( ghost ( dup \ ]] = ( rqdrop quote nest ) ( \ [[ ebody ) if ) dup stack swap ) def
  \ (( ( ghost ( dup \ )) = ( rqdrop quote nest ) ( \ (( body  ) if ) dup macro swap ) def
  \ {{ ( ghost ( dup \ }} = ( rqdrop quote nest ) ( \ {{ ebody ) if ) dup child swap ) def
  uncd
) def

[ defquote ]
f quote quote
( swap quote compose cd def uncd bequeath-quote-prefix f compose )
swap prepose def
\ [  ( init ( dup \ ]  = ( rqdrop finish ) ( \ [  body  ) if ) dup stack swap end ) defquote
\ (  ( init ( dup \ )  = ( rqdrop finish ) ( \ (  ebody ) if ) dup macro swap end ) defquote
\ {  ( init ( dup \ }  = ( rqdrop finish ) ( \ {  body  ) if ) dup child swap end ) defquote
\ [[ ( init ( dup \ ]] = ( rqdrop finish ) ( \ [[ ebody ) if ) dup stack swap end ) defquote
\ (( ( init ( dup \ )) = ( rqdrop finish ) ( \ (( body  ) if ) dup macro swap end ) defquote
\ {{ ( init ( dup \ }} = ( rqdrop finish ) ( \ {{ ebody ) if ) dup child swap end ) defquote
def def def def def def

# Better escape character
# (different behaviour inside quotes than before: doesn't double-quote)

\ \ ( init ( finish ) end ) def

[ qprefix-escape ] (
  dup unglue [ [ \ ] ( ( nest ) ) ] compose
  cd def ( uncd ) dip compose def
) def

\ [  qprefix-escape
\ (  qprefix-escape
\ {  qprefix-escape
\ [[ qprefix-escape
\ (( qprefix-escape
\ {{ qprefix-escape

# Reimplement comment:
\ # ( geti getd gets crankbase f d f i endl s init ( finish drop s d i ) end ) def
[ qprefix-comment ] (
  dup unglue
  [ [ # ] ( geti getd gets f d f i endl s ( drop s d i ( dup ) dip swap ) ) ] compose
  cd def ( uncd ) dip compose def
) def

\ [  qprefix-comment
\ (  qprefix-comment
\ {  qprefix-comment
\ [[ qprefix-comment
\ (( qprefix-comment
\ {{ qprefix-comment

0 exit

# basic string (without escape characters)
\ "
( getd gets geti [ \ " ] d [ \ " ] s f i
  [ 1 ] metacrankbase
  ( drop swap i swap s swap d halt [ 1 ] crank )
  ( dup [ \ " ] = ( drop f swap f swap eval ) ( swap ) if )
  halt [ 1 ] [ 1 ] metacrank ) def
\ " singlet

# reimplement cog:
\ cog drop

"PREFIX" dup def? [ dup unglue ] [ stack ] if
(
  cd
  "" unglue dup def? [[ dup unglue ]] [[ stack ]] if
  (
    cd
    "["  ( ( dup ) dip swap ) ) def
    "("  ( ( dup ) dip swap ) ) def
    "{"  ( ( dup ) dip swap ) ) def
    "[[" ( ( dup ) dip swap ) ) def
    "((" ( ( dup ) dip swap ) ) def
    "{{" ( ( dup ) dip swap ) ) def
    "cog" ( dup ) def
    uncd
  )
  "1" unglue dup def? [[ dup unglue ]] [[ stack ]] if
  (
    cd
    "["  ( compose ( dup ) dip swap ) ) def
    "("  ( compose ( dup ) dip swap ) ) def
    "{"  ( compose ( dup ) dip swap ) ) def
    "[[" ( compose ( dup ) dip swap ) ) def
    "((" ( compose ( dup ) dip swap ) ) def
    "{{" ( compose ( dup ) dip swap ) ) def
    "cog" ( swap eval ) def
    uncd
  )
  eval def
  uncd
)
eval ? def