2crank ing 1 crank # preliminary escape character \
2crank ing 0 crank \
2crank ing 0 crank halt 1 quote ing crank
2crank ing 1 crank compose compose
2crank ing 2 crank VMACRO cast quote eval
2crank ing 0 crank halt 1 quote ing dup ing metacrank
2crank ing 1 crank compose compose compose compose
2crank ing 2 crank VMACRO cast
2crank ing 1 crank def
2crank ing 0 crank
2crank ing 0 crank
2crank ing 1 crank # [:
2crank ing 1 crank # crankbase [ 1 ] metacrankbase dup [ 1 ] =
2crank ing 1 crank # [ ( meta-crank-stuff0 ) ]
2crank ing 1 crank # [ ( meta-crank-stuff1 ) ]
2crank ing 1 crank # if dup stack swap
2crank ing 1 crank # [ 0 ] crank [ 1 ] [ 1 ] metacrank
2crank ing 0 crank
2crank ing 1 crank # meta-crank-stuff0 === dup ']' = ( drop swap drop swap [ 1 ] swap metacrank swap crank
2crank ing 1 crank # quote compose [ dup ] dip swap ) ( compose ( dup ) dip swap ) if
2crank ing 0 crank
2crank ing 1 crank # meta-crank-stuff1 === dup ']' = ( drop swap drop swap [ 1 ] swap metacrank swap crank )
2crank ing 1 crank # ( compose [ dup ] dip swap ) if
2crank ing 0 crank
2crank ing 1 crank # declaration
2crank ing 0 crank [
2crank ing 0 crank
2crank ing 1 crank # init
2crank ing 0 crank crankbase 1 quote ing metacrankbase dup 1 quote ing =
2crank ing 1 crank compose compose compose compose compose
2crank ing 0 crank
2crank ing 1 crank # meta-crank-stuff0
2crank ing 3 crank dup ] quote =
2crank ing 1 crank compose compose
2crank ing 6 crank drop swap drop swap 1 quote swap metacrank swap crank quote
2crank ing 3 crank compose dup quote dip swap
2crank ing 1 crank compose compose compose compose compose compose compose compose
2crank ing 1 crank compose compose compose compose compose \ VMACRO cast quote compose
2crank ing 3 crank compose dup quote dip swap
2crank ing 1 crank compose compose compose \ VMACRO cast quote compose \ if compose
2crank ing 1 crank \ VMACRO cast quote quote compose
2crank ing 0 crank
2crank ing 1 crank # meta-crank-stuff1
2crank ing 3 crank dup ] quote =
2crank ing 1 crank compose compose
2crank ing 6 crank drop swap drop swap 1 quote swap metacrank swap crank
2crank ing 1 crank compose compose compose compose compose compose compose compose \ VMACRO cast quote compose
2crank ing 3 crank compose dup quote dip swap
2crank ing 1 crank compose compose compose \ VMACRO cast quote compose \ if compose
2crank ing 1 crank \ VMACRO cast quote quote compose
2crank ing 0 crank
2crank ing 1 crank # rest of the definition
2crank ing 6 crank if dup stack swap 0 quote crank
2crank ing 2 crank 1 quote 1 quote metacrank
2crank ing 1 crank compose compose compose compose compose compose compose compose
2crank ing 1 crank compose \ VMACRO cast
2crank ing 0 crank
2crank ing 1 crank def

# [:
# crankbase [ 1 ] metacrankbase dup [ 1 ] =
# [ ( meta-crank-stuff0 ) ]
# [ ( meta-crank-stuff1 ) ]
# if dup stack swap
# [ 0 ] crank [ 1 ] [ 1 ] metacrank

# meta-crank-stuff0:
# dup ']' =
# ( drop swap drop swap [ 1 ] swap metacrank swap crank quote compose [ dup ] dip swap )
# ( dup dup dup '[' = swap '(' = or swap '\' = or [ eval ] ( compose [ dup ] dip swap ) if )
# if

# meta-crank-stuff1:
# dup ']' =
# ( drop swap drop swap [ 1 ] swap metacrank swap crank )
# ( dup dup dup '[' = swap '(' = or swap '\' = or [ eval ] ( compose [ dup ] dip swap ) if )
# if

\ [

[ crankbase ] [ 1 ] quote compose [ metacrankbase dup ] compose [ 1 ] quote compose [ = ] compose

[ dup ] \ ] quote compose [ = ] compose
[ drop swap drop swap ] [ 1 ] quote compose [ swap metacrank swap crank quote compose ] compose
[ dup ] quote compose [ dip swap ] compose \ VMACRO cast quote compose
[ dup dup dup ] \ [ quote compose [ = swap ] compose \ ( quote compose [ = or swap ] compose \ \ quote compose [ = or ] compose
[ eval ] quote compose
[ compose ] [ dup ] quote compose [ dip swap ] compose \ VMACRO cast quote compose [ if ] compose \ VMACRO cast
quote compose [ if ] compose \ VMACRO cast quote quote

[ dup ] \ ] quote compose [ = ] compose
[ drop swap drop swap ] [ 1 ] quote compose [ swap metacrank swap crank ] compose \ VMACRO cast quote compose
[ dup dup dup ] \ [ quote compose [ = swap ] compose \ ( quote compose [ = or swap ] compose \ \ quote compose [ = or ] compose
[ eval ] quote compose
[ compose ] [ dup ] quote compose [ dip swap ] compose \ VMACRO cast quote compose [ if ] compose \ VMACRO cast
quote compose [ if ] compose \ VMACRO cast quote quote

compose compose [ if dup stack swap ] compose [ 0 ] quote compose [ crank ] compose
[ 1 ] quote dup compose compose [ metacrank ] compose \ VMACRO cast

def

# \ === [ 1 ] metacrankbase [ 1 ] =
# [ ( halt [ 1 ] [ 1 ] metacrank quote compose [ dup ] dip swap ) ]
# [ ( halt [ 1 ] crank ) ]
# if halt [ 1 ] [ 1 ] metacrank
\ \
[ [ 1 ] metacrankbase [ 1 ] = ]
[ halt [ 1 ] [ 1 ] metacrank quote compose [ dup ] dip swap ]
\ VMACRO cast quote quote compose
[ halt [ 1 ] crank ] VMACRO cast quote quote compose
[ if halt [ 1 ] [ 1 ] metacrank ] compose \ VMACRO cast
def

# macro quote declaration
\ (
\ [ unglue
[ ↋ ] split swap [ ↊ ] split drop [ macro ] compose
[ 8 ] split quote [ prepose ] compose dip
[ 7 ] split eval eval
[ ] [ 1 ] [ 2 ] displace drop [ \ ) ] [ 1 ] [ 1 ] displace drop
quote quote quote [ prepose ] compose dip
[ 6 ] split eval eval
[ ] [ 1 ] [ 2 ] displace drop [ \ ) ] [ 1 ] [ 1 ] displace drop
quote quote quote [ prepose ] compose dip
prepose
def

# redefine macro quote to automatically expand
\ (
( crankbase [ 1 ] metacrankbase dup [ 1 ] =
  [ ( dup \ ) =
      ( drop swap drop swap [ 1 ] swap metacrank swap crank quote compose ( dup ) dip swap )
      ( dup dup dup \ [ = swap \ ( = or swap \ \ = or
        ( eval )
        ( dup def? ( unglue ) [ ] if compose ( dup ) dip swap )
        if )
      if ) ]
  [ ( dup \ ) =
      ( drop swap drop swap [ 1 ] swap metacrank swap crank )
      ( dup dup dup \ [ = swap \ ( = or swap \ \ = or
        ( eval )
        ( dup def? ( unglue ) [ ] if compose ( dup ) dip swap )
        if )
      if ) ]
  if dup macro swap
  [ 0 ] crank [ 1 ] [ 1 ] metacrank ) def

# Namespacing
child cd

[ get-keyword ] (
  unglue swap quote compose cd dup def? ( ( uncd drop ) dip ) dip
) def

# factor out common definitions
[ addon  ] ( compose ( dup ) dip swap ) def
[ init   ] ( crankbase [ 1 ] metacrankbase ) def
[ finish ] ( drop swap drop swap [ 1 ] swap metacrank swap crank ) def
[ nest   ] ( quote compose ( dup ) dip swap ) def
[ body   ] ( get-keyword ( eval ) ( addon ) if ) def
[ ebody  ] ( get-keyword ( eval ) ( dup def? ( unglue ) ( ) if lquote-addon ) if ) def
[ end    ] ( swap [ 0 ] crank [ 1 ] [ 1 ] metacrank return ) def

# placeholder:
\ p[ \ [ unglue def
\ p( \ ( unglue def

\ [  p[ p( init p( dup \ ]  = p( finish ) p( body  ) if ) dup stack end ) eval ing ] def
\ (  p[ p( init p( dup \ )  = p( finish ) p( ebody ) if ) dup macro end ) eval ing ] def
\ {  p[ p( init p( dup \ }  = p( finish ) p( body  ) if ) dup child end ) eval ing ] def
\ [[ p[ p( init p( dup \ ]] = p( finish ) p( ebody ) if ) dup stack end ) eval ing ] def
\ (( p[ p( init p( dup \ )) = p( finish ) p( body  ) if ) dup macro end ) eval ing ] def
\ {{ p[ p( init p( dup \ }} = p( finish ) p( ebody ) if ) dup child end ) eval ing ] def

\ (  p( ghost init p( dup \ )  = p( finish nest ) p( ebody ) if ) dup macro end )
\ [[ p( ghost init p( dup \ ]] = p( finish nest ) p( ebody ) if ) dup stack end )
\ {{ p( ghost init p( dup \ }} = p( finish nest ) p( ebody ) if ) dup child end )

\ [  p( ghost init p( dup \ ]  = p( finish nest ) p( body ) if ) dup stack end )
\ {  p( ghost init p( dup \ }  = p( finish nest ) p( body ) if ) dup child end )
\ (( p( ghost init p( dup \ )) = p( finish nest ) p( body ) if ) dup macro end )

qstack \ 3 split

std-quote dup def? \ unglue p( drop stack ) if
swap compose
p( cd def def def uncd ) eval
std-quote swap def

std-equote dup def? \ unglue p( drop stack ) if
swap compose
p( cd def def def uncd ) eval
std-equote swap def

(
  uncd ( ( uncd ) dip swap quote compose
  [ \ [  ] bequeath
  [ \ (  ] bequeath
  [ \ {  ] bequeath
  [ \ [[ ] bequeath
  [ \ (( ] bequeath
  [ \ {{ ] bequeath
  ccd
)
eval

\ \ [

"PREFIX" dup def? [ dup unglue ] [ stack ] if
(
  cd
  "["  ( ( dup ) dip swap ) ) def
  "("  ( ( dup ) dip swap ) ) def
  "{"  ( ( dup ) dip swap ) ) def
  "[[" ( ( dup ) dip swap ) ) def
  "((" ( ( dup ) dip swap ) ) def
  "{{" ( ( dup ) dip swap ) ) def
  "cog" ( ( dup ) ) def
  uncd
)
eval def